# -*- coding: utf-8 -*-
"""Proy_2 (bike).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llx1JTB4omSxjTbOz8N7U441K762k_yS
"""

import time
import datetime
import pandas as pd
import numpy as np

def get_filters():
"""
Preguntar al usuario por una ciudad, mes and dia para analizar.

Returns:
(str) day -  Dia de la semana a través del cual se va a filtrar,  o "all"  sino se aplicacn filtros  
(str) month - El mes a filtrar, o "all" si no se va filtrar un mes específico
(str) city - nombre de la ciudad a analizar """
""" cargue los xls de ayuda para las descripciones de ciudad, día y mes """
print('......Loading Pr_metros.xlsx (Sheets: cities, months and days).')
print('......Pls. make sure to have the xls in the same folder as the ')
print('......python script')
try:
city_data = pd.read_excel(io='Pr_metros.xlsx', sheet_name='cities', converters={'city_key':str})
month_data = pd.read_excel(io='Pr_metros.xlsx', sheet_name='months', converters={'month_key':str})
day_data = pd.read_excel(io='Pr_metros.xlsx', sheet_name='days' , converters={'day_key':str})

except Exception as er:
print(str(er))
sys.exit()


# Obtener la ciudad a analizar
while True :
    print('-'*40)
print('\n..... Indica la ciudad a analizar (Ingresa eñ número de una de las siguientes ciudades)?')
print('\n[1] - Chicago\n[2] - New York City\n[3] - Washington \n')
city = input('......Número de la Ciudad seleccionada:___ ').lower()

try:

if city in city_data.city_lower.values:
# now get the city name
city_data = city_data.set_index(['city_lower'],drop=False)
city = city_data['city'].loc[city]
print('-'*40)
break

elif city in city_data.city_key.values:
# now get the city name
city_data = city_data.set_index(['city_key'],drop=False)
city = city_data['city'].loc[city]
print('-'*40)
break

else:
print('......Por favor ingrese números entre (1-3) indicado la ciudad seleccionada')

except Exception as er:
print(str(er))
sys.exit()

print('Seleccionaste la ciudad : {}. Gracias.'.format(city))
city_data = city_data.set_index(['city'])
file2load = city_data.file.loc[city]

# get user input for month (all, january, february, ... , june)
while True:
print('-'*40)
print('\n......Indique el mes a analizar (Ingres el número o el mes)?')
length = len(month_data)


for i in range(0, length, 1):
month_short = month_data['month_short'].iloc[(i)]
month_long = month_data['month_long'].iloc[(i)]
print('[{}]- {} -- {}'.format(i,month_short, month_long))

month = input('......Ingresó el mes:___ ').capitalize()

try:
if month in month_data.month_key.values:
# Obtener en nombre del mes
month_data = month_data.set_index(['month_key'],drop=False)
month = month_data['month_long'].loc[month]
print('-'*40)
break


elif month in month_data.month_short.values:
# Obtener el nombre mes 
month_data = month_data.set_index(['month_short'],drop=False)
month = month_data['month_long'].loc[month]
print('-'*40)
break

elif month in month_data.month_long.values:
# Para obtenr el nombre del mes y así establecer el índice y seleccionar el valor que genera un error
month = month
print('-'*40)
break

else:
print('.....Ingreso números entre (1-12) o el nombre corto o largo del mes p.e: Jan o January!')


except Exception as er:
print(str(er))
sys.exit()


print('Seleccionó el mes: {}'.format(month))


# Capturar el día de la semana (all, monday, tuesday, ... sunday)
while True:
print('-'*40)
print('\n...... Indique el día a analizar (Ingrese el número o el día)?')
length = len(day_data)


for i in range(0, length, 1):
day_key = day_data['day_key'].loc[i]
day_short = day_data['day_short'].loc[i]
day_long = day_data['day_long'].loc[i]
print('[{}]- {} -- {}'.format(day_key, day_short,day_long))

day = input('......Your input:___ ').capitalize()


try:
if day in day_data.day_key.values:
# Capturar el nombre del dia
day_data = day_data.set_index(['day_key'],drop=False)
day = day_data['day_long'].loc[day]
print('-'*40)
break

elif day in day_data.day_short.values:
# Capturar el nombre del día
day_data = day_data.set_index(['day_short'],drop=False)
day = day_data['day_long'].loc[day]
print('-'*40)
break

elif day in day_data.day_long.values:
# Capturar el nombre del día (o número correspondiente)
day = day
print('-'*40)
break

else:
print('......Ingrese solo numeros ente 1-7 el nombre largo o corto del día p.e: Mon or Monday!')

except Exception as er:
print(str(er))
sys.exit()

print(' Usted ingreso el dia: {}.'.format(day))
print('-'*40)


return city, month, day, file2load, month_data


def load_data(month, day, file2load, month_data):
"""

Carga datos para la ciudad especificada y filtra por mes y día, si corresponde.

Args:
(str) city - name of the city to analyze
(str) month - name of the month to filter by, or "all" to apply no month filter
(str) day - name of the day of week to filter by, or "all" to apply no day filter
(str) file2load - name of the city data file in teh same folder
(df) month definitions to get the index for access
Returns:
df - Pandas DataFrame containing city data filtered by month and day
"""

print('\n......Grabando los datos requeridos\n')
start_time = time.time()


print ("......Acceso a los datos " + file2load)
df = pd.read_csv(file2load)
original_file_ln = str(len(df.index))

# convertir la columna Hora de inicio al formato "fecha y hora"
df['Start Time'] = pd.to_datetime(arg = df['Start Time'], format = '%Y-%m-%d %H:%M:%S')

# Busqueda o filtrado por el mes indicado
if month != 'All':
# Se Extrae el mes y día de la semana desde la hora de inicio para crear nuevas columnas
df['month'] = df['Start Time'].dt.month

month_data = month_data.set_index(['month_long'],drop=False)
month_idx = int(month_data['month_key'].loc[month])

# filtrar por mes para crear el nuevo marco de datos
df = df.loc[df['month'] == month_idx]

# Filtrar por el día de la semana
if day != 'All':
df['day_of_week'] = df['Start Time'].dt.weekday_name

# Filtrado por el día de la semana creando un nuevo df
df = df.loc[df['day_of_week'] == day]

print('......Filtered Records ' + str(len(df.index)) + '...Original File Length: ' + original_file_ln)
print("\nThis took %s seconds." % (time.time() - start_time))
print('-'*40)

return df


def time_stats(df):
"""Visualizar las estadísticas de mayor frecuencia de tienmpo en el viaje"""

print('\n.....Mayor frecuencia en el tiempo de viaje..\n')
start_time = time.time()

# Convierta la columna Hora de inicio a fecha y hora
df['Start Time'] = pd.to_datetime(arg = df['Start Time'], format = '%Y-%m-%d %H:%M:%S')

#Mostar el día mas comun de la semana 
most_common_day_of_week = df['Start Time'].dt.weekday_name.mode()[0]
print('......Most common day of week: ', most_common_day_of_week)

#Visualizar el mes más comun
most_common_month = df['Start Time'].dt.month.mode()[0]
print('......Most common month: ', most_common_month)

#dMostrar la hora de inicio más frecuente
common_start_hour = df['Start Time'].dt.hour.mode()[0]
print('......Most frequent start hour: ', common_start_hour)

print("\nThis took %s seconds." % (time.time() - start_time))
print('-'*40)


def station_stats(df):

"""Muestra estadísticas sobre las estaciones y el recorrido más populares."""
print('\n......Calculando la estación y recorrido más comunes o populares...\n')
start_time = time.time()

start_time = time.time()

#Mostrar la estación inicial más comun
print('......La estación inical usada con mayor frecuencia: ', df['Start Station'].value_counts().idxmax())

#Mostrar la estación donde normalmente finaliza el recorrido o viaje
print('......La estación donde con mayor frecuencia finaliza el recorrido: ', df['End Station'].value_counts().idxmax())

# Visualice la combinación de estación inicial y final usadas con mayor frecuencia
# Uniónde caracteres cpn la función concat
concat_stations = df['Start Station'] + " to " + df['End Station']
concat_stations = str(concat_stations.value_counts().idxmax())
print('......Most frequent used combinations are: {}'.format(concat_stations))

print('-'*40)


def trip_duration_stats(df):
""" Estadísticas sobre la duración total y promedio del viaje."""
# looked here for help: https://stackoverflow.com/questions/775049/how-do-i-convert-seconds-to-hours-minutes-and-seconds
print('\n......Calculo de la duraciónd del recorrido...\n')
start_time = time.time()
# display total travel time
total_travel_time = int(df['Duración del Recorrido - Viaje'].sum())
total_travel_time = datetime.timedelta(seconds=total_travel_time)
print('......Tiempo total del Recorrido - Viaje: ' + str(total_travel_time))


#display mean travel time
mean_travel_time = int(df['Duración del recorrido'].mean())
mean_travel_time = datetime.timedelta(seconds=mean_travel_time)
print('......Tiempo promedio del Viaje: {} '.format(mean_travel_time))


print("\nSe utilizó %s seconds." % (time.time() - start_time))
print('-'*40)


def user_stats(df):
"""Reporte estadístico sobre los usuarios de Bikeshare."""

print('\n......Calculo de Estadísticas de Usuario...\n')
start_time = time.time()

#Display counts of user types
user_types = df['User Type'].value_counts()
print('......Conteo de tipos de usuarioss: \n' + user_types.to_string())

# Muestra el conteo por genero de usuarios
if 'Gender' in df.columns:
gender_count = df['Gender'].value_counts()
print('......Counts of gender: \n' + gender_count.to_string())

#Mostar el año de nacimiento más temprano, más reciente y más frecuente
if 'Birth Year' in df.columns:
earliest_birth_year = df['Birth Year'].min()
most_recent_birth_year = df['Birth Year'].max()
common_birth_year = df['Birth Year'].mode()[0]
print("......Año de nacimiento mástemprano: " + str(earliest_birth_year))
print("......Año de nacimiento más próximo: " + str(most_recent_birth_year))
print("......Año de nacimiento más frecuente: " + str(common_birth_year))

print("\nEsto ha tomado %s seconds." % (time.time() - start_time))
print('-'*40)

def display_raw(df):
#Simplemente siga mostrando cinco líneas de los datos filtrados si el usuario indica que desea visualizarlos
count=0;
while True:
display = input('\n......¿Desea ver los datos de viaje individuales incluidos en este filtro?\n'
......Pls. type SI (s) or no (n). Your choice: ')
if display.lower() in ('SI', 'no','S','n'):
if display.lower() == 'SI' or display.lower() == 'S':
""" Acceso por un rango que aumenta en 5  """
print(df[count:count+5].to_string())
count +=5
else:
print('......VISUALIZAR LOS DATOS FINALES!')
break
else:
print('.....Ingrese una entrada válida de acuerdo a las opciones indicadas anteriormente')





def main():
while True:
city, month, day, file2load, month_data = get_filters()
df = load_data(month, day, file2load, month_data)
if len(df) > 0:
time_stats(df)
station_stats(df)
trip_duration_stats(df)
user_stats(df)
display_raw(df)
else:
print('......Los filtros aplicados a los datos no arrojaron resultados.!')

restart = input('\n......Quieres volver a intentarlo\n......Pls. type SI (S) or no (n). Indica tu respuesta. ')

if restart.lower() in ('si', 'no','s','n'):
if restart.lower() in ('SI', 'S'):
print('......SIGAMOS.')
else:
print('......ADIOS...')
break
else:
print('.....INGRESA Un dato valido de acuerdo con las opciones indicadas')


if __name__ == "__main__":
main()